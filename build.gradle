apply plugin: 'com.github.ben-manes.versions'

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath('fr.avianey.androidsvgdrawable:gradle-plugin:3.0.0') {
            // should be excluded to avoid conflict
            exclude group: 'xerces'
        }
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

}

subprojects {
    buildscript {
        ext {
            kotlin_version = '1.0.6'
            android_support_lib_version = '25.2.0'
            mariotaku_commons_library_version = '0.9.11'
            mariotaku_restfu_version = '0.9.35'
            mariotaku_object_cursor_version = '0.9.13'
            play_services_version = '10.2.0'
            crashlyrics_version = '2.6.6'
            fabric_plugin_version = '1.22.0'
            dropbox_core_sdk_version = '2.1.2'
            google_api_drive_version = 'v3-rev55-1.22.0'
            exoplayer_version = 'r2.2.0'
            toro_version = '2.1.0'
        }
    }
    afterEvaluate { project ->

        if (project.hasProperty('android')) {
            android {
                compileSdkVersion 25
                buildToolsVersion '25.0.2'

                lintOptions {
                    abortOnError false
                    lintConfig rootProject.file('lint.xml')
                }

                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude '.readme'
                }

                if (System.getenv('TRAVIS') == 'true') {
                    dexOptions {
                        preDexLibraries = false;
                    }
                }

            }
        }


    }

}

def loadSigningConfig(def cfg, def file) {
    Properties signingProp = new Properties()
    signingProp.load(file.newInputStream())
    cfg.setStoreFile(rootProject.file(signingProp.get('storeFile')))
    cfg.setStorePassword((String) signingProp.get('storePassword'))
    cfg.setKeyAlias((String) signingProp.get('keyAlias'))
    cfg.setKeyPassword((String) signingProp.get('keyPassword'))
}