import fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'androidsvgdrawable'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.2'
    }
}

android {

    defaultConfig {
        applicationId "de.vanita5.twittnuker"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 23
        versionName "0.7.8"
        //multiDexEnabled false

        buildConfigField 'boolean', 'LEAK_CANARY_ENABLED', 'Boolean.parseBoolean("false")'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-test.pro'

            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd")
            versionNameSuffix String.format(" (debug %s)", format.format(new Date()))
            resValue("bool", "debug", "true")
        }
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-test.pro'
            resValue("bool", "debug", "false")
        }
    }
    sourceSets {
        main {
            res.srcDirs += project.files("src/$name/res-localized")
            res.srcDirs += project.files("src/$name/res-svg2png")
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://s3.amazonaws.com/repo.commonsware.com"
    }
    flatDir { dirs "$projectDir/lib" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    apt 'com.bluelinelabs:logansquare-compiler:1.3.4'
    androidTestApt 'com.bluelinelabs:logansquare-compiler:1.3.4'
    apt 'com.hannesdorfmann.parcelableplease:processor:1.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    apt 'com.github.mariotaku.ObjectCursor:processor:0.9.4'

    //compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:support-v13:23.2.0'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.twitter:twitter-text:1.13.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.squareup:otto:1.3.8'
    compile 'dnsjava:dnsjava:2.1.7'
    compile 'com.commonsware.cwac:merge:1.1.1'
    compile 'com.commonsware.cwac:layouts:0.4.2'
    compile 'com.rengwuxian.materialedittext:library:2.1.4'
    compile 'com.pnikosis:materialish-progress:1.7'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.7'
    compile 'com.github.johnpersano:supertoasts:1.3.4.1@aar'
    compile 'com.github.mariotaku:MessageBubbleView:1.2'
    compile 'com.github.mariotaku:DragSortListView:0.6.1'
    compile 'com.github.uucky:ColorPicker-Android:0.9.7@aar'
//    compile 'com.github.boxme:asyncmanager:1.0.0'
    compile 'com.sprylab.android.texturevideoview:texturevideoview:1.1.1'
    compile 'com.squareup:tape:1.2.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-primitives:commons-primitives:1.0'
    compile 'com.bluelinelabs:logansquare:1.3.4'
    compile 'org.jraf:android-switch-backport:2.0.1'
    compile 'com.github.mariotaku:jackson-jr-trees:7fe682ee09'
    compile 'com.makeramen:roundedimageview:2.1.1'
    compile 'com.soundcloud.android:android-crop:1.0.1@aar'
    compile 'com.hannesdorfmann.parcelableplease:annotation:1.0.2'
    compile 'com.github.mariotaku:PickNCrop:0.9.3'
    compile 'com.github.mariotaku.RestFu:okhttp3:0.9.23'
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.lnikkila:extendedtouchview:0.1.0'
    compile 'com.google.dagger:dagger:2.0.2'
    compile 'org.attoparser:attoparser:1.4.0.RELEASE'
    compile 'com.github.mariotaku.MediaViewerLibrary:base:0.9.10'
    compile 'com.github.mariotaku.MediaViewerLibrary:subsample-image-view:0.9.10'
    compile 'com.github.mariotaku:SQLiteQB:0.9.4'
    compile 'com.github.mariotaku.ObjectCursor:core:0.9.4'
    compile project(':twittnuker.component.common')

    compile 'com.google.android.gms:play-services-gcm:8.3.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') { transitive = true; }
    compile ':YouTubeAndroidPlayerApi:1.2.2@jar'

    // Twittnuker specific
    compile 'org.sufficientlysecure:donations:2.4'
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'

    // libraries for f-droid
    compile 'org.osmdroid:osmdroid-android:5.1'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta1'

    provided 'javax.annotation:jsr250-api:1.0'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support:support-annotations:23.2.0'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
}

task svgToDrawable(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg/drawable')
    // specify the android res folder
    to = file('src/main/res-svg2png')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg/drawable/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'drawable'
}

task svgToMipmap(type: SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg/mipmap')
    // specify the android res folder
    to = file('src/main/res-svg2png')
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'

    outputType = 'mipmap'
}